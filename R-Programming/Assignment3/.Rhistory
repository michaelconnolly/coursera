source("best.R")
setwd("C:/dev/coursera/R-Programming/Assignment3")
source("best.R")
best("TX, "heart attack")
best("TX", "heart attack")
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
data_all <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state is valid
## Logic for validity: if it is in the table.
data_by_state <- data_all[data_all$State == state, ]
if (nrow(data_by_state) == 0){
stop("invalid state")
}
## Check that outcome are valid, and get further subset.
column_number <- -1
if (outcome == "heart attack"){
column_number <- 11
}
else if (outcome == "heart failure"){
column_number <- 17
}
else if (outcome == "pneumonia"){
column_number <- 23
}
else{
stop("invalid outcome")
}
## data_by_state_and_outcome <- data_by_state[data_by_state[]]
## Let's remove the NA's.
bad_rows <- is.na(data_by_state[column_number])
data_by_state_clean <- data_by_state[!bad_rows, ]
## What is the lowest value?
lowest_value <- as.numeric(mapply(min, data_by_state_clean[column_number]))
data_lowest_value <- data_by_state_clean[data_by_state_clean[column_number == lowest_value]]
## Pull out the row that has the lowest value.
data_min <- lapply(data_by_state_clean, min)
## Return hospital name in that state with lowest 30-day death
data_min$Hospital.Name
## rate
}
source("best.R")
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
data_all <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state is valid
## Logic for validity: if it is in the table.
data_by_state <- data_all[data_all$State == state, ]
if (nrow(data_by_state) == 0){
stop("invalid state")
}
## Check that outcome are valid, and get further subset.
column_number <- -1
if (outcome == "heart attack"){
column_number <- 11
}
else if (outcome == "heart failure"){
column_number <- 17
}
else if (outcome == "pneumonia"){
column_number <- 23
}
else{
stop("invalid outcome")
}
## data_by_state_and_outcome <- data_by_state[data_by_state[]]
## Let's remove the NA's.
bad_rows <- is.na(data_by_state[column_number])
data_by_state_clean <- data_by_state[!bad_rows, ]
## What is the lowest value?
lowest_value <- as.numeric(mapply(min, data_by_state_clean[column_number]))
data_lowest_value <- data_by_state_clean[data_by_state_clean[column_number] == lowest_value]
## Pull out the row that has the lowest value.
data_min <- lapply(data_by_state_clean, min)
## Return hospital name in that state with lowest 30-day death
data_min$Hospital.Name
## rate
}
source("best.R")
best("TX", "heart attack")
best("MD", "heart attack")
best <- function(state, outcome) {
## Read outcome data
data_all <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state is valid
## Logic for validity: if it is in the table.
data_by_state <- data_all[data_all$State == state, ]
if (nrow(data_by_state) == 0){
stop("invalid state")
}
## Check that outcome are valid, and get further subset.
column_number <- -1
if (outcome == "heart attack"){
column_number <- 11
}
else if (outcome == "heart failure"){
column_number <- 17
}
else if (outcome == "pneumonia"){
column_number <- 23
}
else{
stop("invalid outcome")
}
## data_by_state_and_outcome <- data_by_state[data_by_state[]]
## Let's remove the NA's.
bad_rows <- is.na(data_by_state[column_number])
data_by_state_clean <- data_by_state[!bad_rows, ]
## What is the lowest value?
lowest_value <- as.numeric(mapply(min, data_by_state_clean[column_number]))
data_lowest_value <- data_by_state_clean[data_by_state_clean[column_number] == lowest_value]
## TODO!  Need to sort and show the least alphabetical!
## Pull out the row that has the lowest value.
##data_min <- lapply(data_by_state_clean, min)
## Return hospital name in that state with lowest 30-day death
data_lowest_value$Hospital.Name
## rate
}
source("best.R")
best("TX", "heart attack")
best("TX", "heart attack")
? as.numeric
View(data_by_state_clean)
data_by_state_clean[data_by_state_clean[11] == 12]
data_by_state_clean
data_by_state_clean[data_by_state_clean[11],]
data_by_state_clean[data_by_state_clean[[11]],]
View(data_by_state_clean)
best("TX", "heart attack")
View(data_by_state_clean)
foo <- data_by_state_clean[data_by_state_clean[column_number] == 12]
foo <- data_by_state_clean[data_by_state_clean[column_number] == '12']
foo <- data_by_state_clean[data_by_state_clean[column_number] = '12']
foo <- data_by_state_clean[data_by_state_clean[column_number]]
foo <- data_by_state_clean[column_number]
View(foo)
foo <- data_by_state_clean[data_by_state_clean$State == "TX"]
View(data_by_state_clean)
foo <- data_by_state_clean[data_by_state_clean$State == "TX", ]
View(foo)
foo <- data_by_state_clean[data_by_state_clean$City == "El Paso", ]
View(foo)
View(data_by_state_clean)
foo <- data_by_state_clean[data_by_state_clean$City == "EL PASO", ]
View(foo)
View(foo)
foo <- data_by_state_clean[data_by_state_clean[6] == "EL PASO", ]
View(foo)
foo <- data_by_state_clean[data_by_state_clean[11] == 12, ]
View(foo)
foo <- data_by_state_clean[data_by_state_clean[11] > 12, ]
View(data_by_state_clean)
foo <- data_by_state_clean[data_by_state_clean[11] > 12.0, ]
foo <- data_by_state_clean[data_by_state_clean[11]== 12.0, ]
foo <- data_by_state_clean[data_by_state_clean[11]== as.numeric(12.0), ]
foo <- data_by_state_clean[data_by_state_clean[11]== as.string(12.0), ]
? as.numeric
? as.character
foo <- data_by_state_clean[data_by_state_clean[11]== as.character(12.0), ]
View(foo)
View(data_by_state_clean)
foo <- data_by_state_clean[data_by_state_clean[11] == 16.1, ]
View(foo)
foo <- data_by_state_clean[data_by_state_clean[11] < 13, ]
View(foo)
foo <- data_by_state_clean[data_by_state_clean[11] == 12.0, ]
foo <- data_by_state_clean[data_by_state_clean[11] == 12.9, ]
foo <- data_by_state_clean[data_by_state_clean[11] == as.numeric(12.9), ]
foo <- data_by_state_clean[data_by_state_clean[11] == as.numeric(12.0), ]
best <- function(state, outcome) {
## Read outcome data
data_all <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state is valid
## Logic for validity: if it is in the table.
data_by_state <- data_all[data_all$State == state, ]
if (nrow(data_by_state) == 0){
stop("invalid state")
}
## Check that outcome are valid, and get further subset.
column_number <- -1
if (outcome == "heart attack"){
column_number <- 11
}
else if (outcome == "heart failure"){
column_number <- 17
}
else if (outcome == "pneumonia"){
column_number <- 23
}
else{
stop("invalid outcome")
}
## data_by_state_and_outcome <- data_by_state[data_by_state[]]
## Let's remove the NA's.
bad_rows <- is.na(data_by_state[column_number])
data_by_state_clean <- data_by_state[!bad_rows, ]
## What is the lowest value?
lowest_value <- as.numeric(mapply(min, data_by_state_clean[column_number]))
data_lowest_value <- data_by_state_clean[data_by_state_clean[column_number] == lowest_value, ]
## TODO!  Need to sort and show the least alphabetical!
## Pull out the row that has the lowest value.
##data_min <- lapply(data_by_state_clean, min)
## Return hospital name in that state with lowest 30-day death
data_lowest_value$Hospital.Name
## rate
}
source("best.R")
best("TX", "heart attack")
best("MD", "heart attack")
best("TX", "heart failure")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
best("TX", "heart failure")
foo <- data_by_state_clean[data_by_state_clean[column_number] == lowest_value, ]
foo <- data_by_state_clean[as.numeric(data_by_state_clean[column_number]) == lowest_value, ]
foo <- data_by_state_clean[as.character(data_by_state_clean[column_number]) == lowest_value, ]
foo <- data_by_state_clean[as.character(data_by_state_clean[column_number]) == as.character(as.numeric(lowest_value)), ]
str(lowest_value)
bar <- as.double(lowest_value)
10 == 10.0
10 / 1.0
? sprintf
sprintf("%.3f", lowest_value)
spritnf("%.1f", lowest_value)
sprintf("%.1f", lowest_value)
foo2 <- sprintf("%.1f", lowest_value)
foo <- data_by_state_clean[as.character(data_by_state_clean[column_number]) == foo2, ]
foo3 <- as.numeric(foo2)
