"""
Project #2 in Algorthimic Thinking.
Michael Connolly
"""

from collections import deque


def init_graph(num_nodes):
    """
    internal function used to create a graph with the inputed amount of nodes.
    """

    # Init graph structure.
    graph = dict()

    # Handle the error case case num_nodes is bogus.
    if (num_nodes > 0):
    
        # Add nodes to graph.
        for idx in range(num_nodes):
            graph[idx] = set([])

    return graph



def bfs_visited(ugraph, start_node):
    """
    Takes the undirected graph ugraph and the node start_node and
    returns the set consisting of all nodes that are visited by a
    breadth-first search that starts at start_node.
    """

    visited = set([])

    #print "STARTING bfs_visited with:", start_node, ugraph

    # initialize Q to an empty queue
    que = deque()

    # initialize set_to_return to include the start_node,
    # and, add our start_node to the Q.
    visited.add(start_node)
    que.append(start_node)

    # lets loop through all our nodes!
    while len(que):

        #print "visited:", visited
        #print "q:", que

        # gimme the next item.
        current_node = que.popleft()
        #print "current_node:", current_node
        #print "ugraph:", ugraph
        #print "q after pop:", q

        # enumerate all neighbors and add them to the q.
        for neighbor in ugraph[current_node]:

            if (neighbor not in visited):

                visited.add(neighbor)
                que.append(neighbor)

    #print "ending bfs_visited with:", visited
    return visited



def cc_visited(ugraph):
    """
    Takes the undirected graph ugraph and returns a list of sets,
    where each set consists of all the nodes (and nothing else) in
    a connected component, and there is exactly one set in the
    list for each connected component in ugraph and nothing else.
    """

    remaining_nodes = ugraph.copy()
    list_of_sets = list([])

    while len(remaining_nodes):

        #print "remaining_nodes:", remaining_nodes
        
        idx = remaining_nodes.keys()[0]
        #print "i:", i

        #print "ABOUT to call bfs_visited with:", idx, ugraph
        visited_nodes = bfs_visited(ugraph, idx)
        #print "visited_nodes:" , visited_nodes
        if (visited_nodes not in list_of_sets):
            list_of_sets.append(visited_nodes)
        #print "list_of_sets:" , list_of_sets
        

        remaining_nodes.pop(idx)

    #print "about to return cc_visited:", list_of_sets
    return list_of_sets


def largest_cc_size(ugraph):
    """
    Takes the undirected graph ugraph and returns the size (an integer)
    of the largest connected component in ugraph.
    """

    #print "starting with graph:", ugraph
    size_to_return = 0

    set_of_cc = cc_visited(ugraph)

    for components in set_of_cc:
        #print "components:", components
        size_of_cc = len(components)
        
        if (size_of_cc > size_to_return):
            size_to_return = size_of_cc

    return size_to_return


def compute_resilience(ugraph, attack_order):
    """
    Takes the undirected graph ugraph, a list of nodes attack_order
    and iterates through the nodes in attack_order. For each node
    in the list, the function removes the given node and its edges
    from the graph and then computes the size of the largest
    connected component for the resulting graph.
    """

    list_of_cc_largest_sizes = list([])
    list_of_cc_largest_sizes.append(largest_cc_size(ugraph))

    hacked_graph = ugraph.copy()
    
    for node_to_attack in attack_order:

        #print "graph start:", hacked_graph

        # Remove the node_to_attack, by ...
        # 1) removing the edges that connect to it    
        for node_key in hacked_graph.keys():
            #print "node_key:", node_key
            hacked_graph[node_key].difference_update(list([node_to_attack]))
        # 2) removing the node itself

        #print "node to attack:", node_to_attack
        hacked_graph.pop(node_to_attack)
        
        #print "graph end:", hacked_graph

        size_of_largest = largest_cc_size(hacked_graph)
        list_of_cc_largest_sizes.append(size_of_largest)

    return list_of_cc_largest_sizes
    

### initialize our constants.
##EX_GRAPH0 = dict()
##EX_GRAPH1 = dict()
##EX_GRAPH2 = dict()
##
### create the graphs and nodes.
##EX_GRAPH0 = init_graph(3)
##EX_GRAPH1 = init_graph(7)
##EX_GRAPH2 = init_graph(10)
##
### Add edges to EX_GRAPH0.
##EX_GRAPH0[0].add(1)
##EX_GRAPH0[0].add(2)
##
### Add edges to EX_GRAPH1.
##EX_GRAPH1[0].add(1)
##EX_GRAPH1[1].add(2)
##EX_GRAPH1[2].add(3)
##EX_GRAPH1[3].add(0)
##EX_GRAPH1[0].add(4)
##EX_GRAPH1[4].add(1)
##EX_GRAPH1[0].add(5)
##EX_GRAPH1[5].add(2)
##EX_GRAPH1[1].add(6)
##    
### Add edges to EX_GRAPH2.
##EX_GRAPH2[0].add(1)
##EX_GRAPH2[1].add(2)
##EX_GRAPH2[2].add(3)
##EX_GRAPH2[8].add(1)
##EX_GRAPH2[8].add(2)
##EX_GRAPH2[0].add(4)
##EX_GRAPH2[4].add(1)
##EX_GRAPH2[0].add(5)
##EX_GRAPH2[5].add(2)
##EX_GRAPH2[1].add(6)
##EX_GRAPH2[2].add(7)
##EX_GRAPH2[7].add(3)
##EX_GRAPH2[3].add(7)
##EX_GRAPH2[9].add(4)
##EX_GRAPH2[9].add(5)
##EX_GRAPH2[9].add(6)
##EX_GRAPH2[9].add(7)
##EX_GRAPH2[9].add(0)
##EX_GRAPH2[9].add(3)

GRAPH0 = {0: set([1]),
          1: set([0, 2]),
          2: set([1, 3]),
          3: set([2])}

GRAPH1 = {0: set([1, 2, 3, 4]),
          1: set([0, 2, 3, 4]),
          2: set([0, 1, 3, 4]),
          3: set([0, 1, 2, 4]),
          4: set([0, 1, 2, 3])}

GRAPH2 = {1: set([2, 4, 6, 8]),
          2: set([1, 3, 5, 7]),
          3: set([2, 4, 6, 8]),
          4: set([1, 3, 5, 7]),
          5: set([2, 4, 6, 8]),
          6: set([1, 3, 5, 7]),
          7: set([2, 4, 6, 8]),
          8: set([1, 3, 5, 7])}

GRAPH3 = {0: set([]),
          1: set([2]),
          2: set([1]),
          3: set([4]),
          4: set([3])}

GRAPH4 = {0: set([1, 2, 3, 4]),
          1: set([0]),
          2: set([0]),
          3: set([0]),
          4: set([0]),
          5: set([6, 7]),
          6: set([5]),
          7: set([5])}

GRAPH5 = {"dog": set(["cat"]),
          "cat": set(["dog"]),
          "monkey": set(["banana"]),
          "banana": set(["monkey", "ape"]),
          "ape": set(["banana"])}

GRAPH6 = {1: set([2, 5]),
          2: set([1, 7]),
          3: set([4, 6, 9]),
          4: set([3, 6, 9]),
          5: set([1, 7]),
          6: set([3, 4, 9]),
          7: set([2, 5]),
          9: set([3, 4, 6])}

GRAPH7 = {0: set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          1: set([0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          2: set([0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          3: set([0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          4: set([0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          5: set([0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          6: set([0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          7: set([0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          8: set([0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          9: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          10: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          11: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          12: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          13: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          14: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          15: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          16: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          17: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          18: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          19: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          20: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          21: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          22: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          23: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          24: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          25: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          26: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          27: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          28: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          29: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          30: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          31: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          32: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          33: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          34: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          35: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          36: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          37: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          38: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          39: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          40: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          41: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49]), 
          42: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49]), 
          43: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49]), 
          44: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49]), 
          45: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49]), 
          46: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49]), 
          47: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49]), 
          48: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49]), 
          49: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48])}

GRAPH8 = {0: set([]), 
          1: set([]), 
          2: set([]), 
          3: set([]), 
          4: set([]), 
          5: set([]), 
          6: set([]), 
          7: set([]), 
          8: set([]), 
          9: set([]), 
          10: set([]), 
          11: set([]), 
          12: set([]), 
          13: set([]), 
          14: set([]), 
          15: set([]), 
          16: set([]), 
          17: set([]), 
          18: set([]), 
          19: set([]), 
          20: set([]), 
          21: set([]), 
          22: set([]), 
          23: set([]), 
          24: set([]), 
          25: set([]), 
          26: set([]), 
          27: set([]), 
          28: set([]), 
          29: set([]), 
          30: set([]), 
          31: set([]), 
          32: set([]), 
          33: set([]), 
          34: set([]), 
          35: set([]), 
          36: set([]), 
          37: set([]), 
          38: set([]), 
          39: set([]), 
          40: set([]), 
          41: set([]), 
          42: set([]), 
          43: set([]), 
          44: set([]), 
          45: set([]), 
          46: set([]), 
          47: set([]), 
          48: set([]), 
          49: set([])}


GRAPH9 = {0: set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]),
          1: set([0, 3, 4, 7, 8, 9, 10]),
          2: set([0, 5, 6, 11, 12, 13, 14]),
          3: set([0, 1, 7, 8]),
          4: set([0, 1, 9, 10]),
          5: set([0, 2, 11, 12]),
          6: set([0, 2, 13, 14]),
          7: set([0, 1, 3]),
          8: set([0, 1, 3]),
          9: set([0, 1, 4]),
          10: set([0, 1, 4]),
          11: set([0, 2, 5]),
          12: set([0, 2, 5]),
          13: set([0, 2, 6]),
          14: set([0, 2, 6])}

GRAPH10 = {0: set([1, 2]),
           1: set([0]),
           2: set([0, 3, 4]),
           3: set([2]),
           4: set([2, 5, 6,]),
           5: set([4]),
           6: set([4, 7, 8]),
           7: set([6]),
           8: set([6, 9 , 10]),
           9: set([8]),
           10: set([8, 11, 12]),
           11: set([10]),
           12: set([10,13, 14]),
           13: set([12]),
           14: set([12, 15, 16]),
           15: set([14]),
           16: set([14, 17, 18]),
           17: set([16]),
           18: set([16, 19, 20]),
           19: set([18]),
           20: set([18])}

#LIST_OF_TESTS = [GRAPH0, GRAPH1, GRAPH2, GRAPH3, GRAPH4, GRAPH5, GRAPH6,
#                 GRAPH7, GRAPH8, GRAPH9, GRAPH10]

#print "EX_GRAPH1:", EX_GRAPH1

#foo = cc_visited(GRAPH0)
#print foo

#print bfs_visited(EX_GRAPH0, 0)
#print bfs_visited(EX_GRAPH1, 0)
#print bfs_visited(EX_GRAPH2, 0)

#print cc_visited(EX_GRAPH0)
#print cc_visited(EX_GRAPH1)
#print cc_visited(EX_GRAPH2)

#print largest_cc_size(GRAPH0)
#print largest_cc_size(GRAPH1)
#print largest_cc_size(EX_GRAPH2)

#print compute_resilience(GRAPH0, list([1, 2]))
